<!--

  Copyright(c) 2006 to 2019 ADLINK Technology Limited and others
 
  This program and the accompanying materials are made available under the
  terms of the Eclipse Public License v. 2.0 which is available at
  http://www.eclipse.org/legal/epl-2.0, or the Eclipse Distribution License
  v. 1.0 which is available at
  http://www.eclipse.org/org/documents/edl-v10.php.
 
  SPDX-License-Identifier: EPL-2.0 OR BSD-3-Clause
-->

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

	<modelVersion>4.0.0</modelVersion>


	<groupId>com.prismtech.java5psm.tests</groupId>
	<artifactId>java5psm-test</artifactId>
	<version>1.0.0</version>
	<name>Java 5 PSM Unittest</name>

    <!-- NOTE: This project run unit tests against Cyclone Java5 DDS.                           -->
    <!-- It's independant of the Cyclone Java5 DDS version, but this version number MUST        -->
    <!-- be specified as a "cyclone-dds-version" property (e.g.: mvn -Dcyclone-dds-version=1.0 test). -->
    <!-- The Cyclone dds build set it automatically in testsuite/unittest/pom.xml         -->

	<properties>
		<junit-version>4.8.1</junit-version>
		<maven-surefire-plugin-version>2.9</maven-surefire-plugin-version>
		<maven-exec-plugin-version>1.2.1</maven-exec-plugin-version>
        <build-helper-maven-plugin-version>1.7</build-helper-maven-plugin-version>
		<gen-test-java-dir>${project.build.directory}/generated-test-sources/java</gen-test-java-dir>
        <cyclone-dds-version>0.1-SNAPSHOT</cyclone-dds-version>
    </properties>
    
	<dependencies>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>${junit-version}</version>
			<scope>compile</scope>
		</dependency>
        <!--  Cyclone dds -->
		<dependency>
			<groupId>org.eclipse.cyclonedds</groupId>
			<artifactId>cyclone-dds</artifactId>
			<version>${cyclone-dds-version}</version>
		</dependency>
	</dependencies>
    
	<build>
		<pluginManagement>
			<plugins>
            <!-- Maven exec plugin used for test execution-->
				<plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>exec-maven-plugin</artifactId>
					<version>${maven-exec-plugin-version}</version>
				</plugin>
				<plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>build-helper-maven-plugin</artifactId>
					<version>${build-helper-maven-plugin-version}</version>
					<executions>
                    <!-- add ${gen-test-java-dir} as sources for tests -->
						<execution>
							<id>add-generated-sources</id>
							<phase>generate-test-sources</phase>
							<goals>
								<goal>add-test-source</goal>
							</goals>
							<configuration>
								<sources>
									<source>${gen-test-java-dir}</source>
								</sources>
							</configuration>
						</execution>
					</executions>
				</plugin>
			</plugins>
		</pluginManagement>

		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>${maven-surefire-plugin-version}</version>
				<configuration>
                     <!-- Sets the VM argument line used when unit tests are run. -->
					<argLine>${surefireArgLine}</argLine>
					<testFailureIgnore>true</testFailureIgnore>
					<reuseForks>false</reuseForks>
                    <forkedProcessTimeoutInSeconds>300</forkedProcessTimeoutInSeconds>
					<systemPropertyVariables>
						<JAVA5PSM_SERVICE_ENV>org.eclipse.cyclonedds.core.ServiceEnvironmentImpl</JAVA5PSM_SERVICE_ENV>
						<JAVA5PSM_MODE>cafe</JAVA5PSM_MODE>
					</systemPropertyVariables>
					<excludes>
						<exclude>**/*opensplice_spTest.java</exclude>
						<exclude>**/*opensplice_shmTest.java</exclude>
						<exclude>**/*openspliceTest.java</exclude>
						<exclude>**/*protobuf*.java</exclude>
					</excludes>
				</configuration>
			</plugin>
            <!-- IDL code generation -->
			<plugin>
				<groupId>org.eclipse.cyclonedds</groupId>
				<artifactId>idl2j</artifactId>
				<version>0.1-SNAPSHOT</version>
				<executions>
					<execution>
						<id>idl-compile</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>idl-compile</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<idlc>idlj</idlc>
					<idlDir>src/test/idl</idlDir>
					<outDir>${gen-test-java-dir}</outDir>
					<mode>-v</mode>
				</configuration>
			</plugin>
			<plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.1</version>
                <configuration>
                    <excludes>
                        <exclude>**/*opensplice_sp*.java</exclude>
                        <exclude>**/*opensplice_shm*.java</exclude>
                        <exclude>**/*opensplice*.java</exclude>
                        <exclude>**/*protobuf*.java</exclude>
                    </excludes>
                </configuration>
                <executions>
                    <execution>
                        <id>default-testCompile</id>
                        <phase>test-compile</phase>
                        <configuration>
                            <testExcludes>
                                <exclude>**/*opensplice_spTest.java</exclude>
                                <exclude>**/*opensplice_shmTest.java</exclude>
                                <exclude>**/*openspliceTest.java</exclude>
                                <exclude>**/*protobuf*.java</exclude>
                            </testExcludes>
                        </configuration>
                        <goals>
                            <goal>testCompile</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
		</plugins>
	</build>

	
	<profiles>
		<profile>
			<id>codeAnalysis</id>
			<activation>
				<property>
					<name>codeAnalysis</name>
				</property>
			</activation>
			<build>
				<plugins>
          <!-- Generate code coverage html pages -->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-antrun-plugin</artifactId>
						<version>1.7</version>
						<dependencies>
							<dependency>
								<groupId>org.jacoco</groupId>
								<artifactId>org.jacoco.ant</artifactId>
								<version>0.7.2.201409121644</version>
							</dependency>
							<dependency>
								<groupId>ant-contrib</groupId>
								<artifactId>ant-contrib</artifactId>
								<version>20020829</version>
							</dependency>
						</dependencies>
						<executions>
							<execution>
								<id>jacoco-report</id>
								<phase>package</phase>
								<goals>
									<goal>run</goal>
								</goals>
								<configuration>
									<target>

										<taskdef name="jacoco-report" classname="org.jacoco.ant.ReportTask"
											classpathref="maven.plugin.classpath" />
										<taskdef classpathref="maven.runtime.classpath"
											resource="net/sf/antcontrib/antcontrib.properties" />
										<available
											file="${project.build.directory}/coverage-reports/jacoco-ut.exec"
											property="jacoco.exec.file.exists" />
										<echo
											message="${project.build.directory}/coverage-reports/jacoco-ut.exec" />
										<if>
											<equals arg1="${jacoco.exec.file.exists}" arg2="true" />
											<then>
												<echo message="Executing jacoco report" />
												<trycatch>
													<try>
														<jacoco-report>
															<executiondata>
																<file
																	file="${project.build.directory}/coverage-reports/jacoco-ut.exec" />
															</executiondata>
															<structure name="java5 Cafe">
																<classfiles>
																	<fileset
																		file="../../../standalone-jars/cafe/target/cafe-${project.version}.jar" />
																</classfiles>

																<sourcefiles encoding="UTF-8">
																	<fileset dir="../../../cafe-dds-core/src/main/java">
																		<include name="**/*.java" />
																	</fileset>
																</sourcefiles>
															</structure>
															<html destdir="${project.basedir}/target/cafe/codecoverage" />
															<xml
																destfile="${project.basedir}/target/cafe/codecoverage/jacoco-cafe.xml" />
														</jacoco-report>
													</try>
													<catch>
														<echo>skipping</echo>
													</catch>
												</trycatch>
											</then>
											<else>
												<echo message="No jacoco-ut.exec file found." />
											</else>
										</if>
									</target>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>org.jacoco</groupId>
						<artifactId>jacoco-maven-plugin</artifactId>
						<version>0.7.2.201409121644</version>
						<executions>
                <!-- Prepares the property pointing to the JaCoCo runtime agent which
                is passed as VM argument when Maven the Surefire plugin is executed. -->
							<execution>
								<id>pre-unit-test</id>
								<goals>
									<goal>prepare-agent</goal>
								</goals>
								<configuration>
                <!-- Sets the path to the file which contains the execution data. -->
									<destFile>${project.build.directory}/coverage-reports/jacoco-ut.exec</destFile>
                <!--
                    Sets the name of the property containing the settings
                    for JaCoCo runtime agent.
                -->
									<propertyName>surefireArgLine</propertyName>
								</configuration>
							</execution>
        <!--
            Ensures that the code coverage report for unit tests is created after
            unit tests have been run.
        -->
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>
	
</project>
