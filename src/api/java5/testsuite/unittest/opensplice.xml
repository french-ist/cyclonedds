<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

	<modelVersion>4.0.0</modelVersion>

	<groupId>com.prismtech.java5psm.tests</groupId>
	<artifactId>java5psm-test</artifactId>
	<name>Java 5 PSM Unittest</name>
	<version>1.0</version>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<gen-test-idl-dir>${project.build.directory}/generated-test-sources/idl/</gen-test-idl-dir>
		<JAVA5PSM_LOCATION>${env.OSPL_HOME_NORMALIZED}/jar/${env.SPLICE_TARGET}/dcpssaj5.jar</JAVA5PSM_LOCATION>
		<JAVA5PSM_IDLPP_EXEC>idlpp</JAVA5PSM_IDLPP_EXEC>
		<JAVA5PSM_IDLPP_ARGS>-l java ${project.build.directory}/../src/test/idl/test.idl</JAVA5PSM_IDLPP_ARGS>
		<protobuf>**/*protobuf*.java</protobuf>
	</properties>


	<profiles>
		<profile>
			<id>protobuf</id>
			<properties>
				<protobuf>dummy</protobuf>
				<gen-test-protobuf-dir>${project.build.directory}/generated-test-sources/proto/</gen-test-protobuf-dir>
				<PROTOBUF_LOCATION>${env.OSPL_HOME_NORMALIZED}/jar/${env.SPLICE_TARGET}/dcpsprotobuf.jar</PROTOBUF_LOCATION>
				<JAVA5PSM_PROTOBUF_EXEC>protoc</JAVA5PSM_PROTOBUF_EXEC>
			    <JAVA5PSM_PROTOBUF_ARGS>--java_out=${gen-test-protobuf-dir} --ddsjava_out=${gen-test-protobuf-dir} --proto_path=${env.OSPL_OUTER_HOME_NORMALIZED}/testsuite/dbt/api/dcps/java5/src/test/proto --proto_path=${env.PROTOBUF_HOME_NORMALIZED}/src --proto_path=${env.OSPL_HOME_NORMALIZED}/src/tools/protobuf/protos ${env.OSPL_OUTER_HOME_NORMALIZED}/testsuite/dbt/api/dcps/java5/src/test/proto/proto.proto</JAVA5PSM_PROTOBUF_ARGS>
			</properties>
			<dependencies>
				<dependency>
					<groupId>protobuf-location</groupId>
					<artifactId>protobuf-jar</artifactId>
					<version>1.0.0</version>
					<scope>system</scope>
					<systemPath>${PROTOBUF_LOCATION}</systemPath>
				</dependency>
				<!-- dependency>
					<groupId>com.google.protobuf</groupId>
					<artifactId>protobuf-java</artifactId>
					<version>2.6.0</version>
				</dependency-->
		    </dependencies>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-enforcer-plugin</artifactId>
						<version>1.3.1</version>
						<configuration>
							<rules>
								<requireEnvironmentVariable>
									<variableName>PROTOBUF_HOME</variableName>
									<message>PROTOBUF_HOME system variable must be set!</message>
								</requireEnvironmentVariable>
							</rules>
							<fail>true</fail>
						</configuration>
						<executions>
							<execution>
								<id>enforce-property</id>
								<goals>
									<goal>enforce</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
					<plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>exec-maven-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>generate-sources-protobuf</id>
                                <phase>generate-sources</phase>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                                <configuration>
                                    <executable>${JAVA5PSM_PROTOBUF_EXEC}</executable>
                                    <workingDirectory>${gen-test-protobuf-dir}</workingDirectory>
                                    <commandlineArgs>${JAVA5PSM_PROTOBUF_ARGS}</commandlineArgs>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>build-helper-maven-plugin</artifactId>
						<version>1.7</version>
						<executions>
							<execution>
								<id>add-generated-protobuf-sources</id>
								<phase>generate-sources</phase>
								<goals>
									<goal>add-source</goal>
								</goals>
								<configuration>
									<sources>
										<source>${gen-test-protobuf-dir}</source>
									</sources>
								</configuration>
							</execution>
						</executions>
                    </plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<id>opensplice-shm</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-surefire-plugin</artifactId>
						<version>2.15</version>
						<configuration>
                     <!-- Sets the VM argument line used when unit tests are run. -->
							<argLine>${surefireArgLine}</argLine>
                    <!-- Skips unit tests if the value of skip.unit.tests property is true -->
							<skipTests>${skip.unit.tests}</skipTests>
							<testFailureIgnore>true</testFailureIgnore>
							<reuseForks>false</reuseForks>
							<forkedProcessTimeoutInSeconds>500</forkedProcessTimeoutInSeconds>
							<redirectTestOutputToFile>true</redirectTestOutputToFile>
							<systemPropertyVariables>
								<JAVA5PSM_SERVICE_ENV>org.opensplice.dds.core.OsplServiceEnvironment</JAVA5PSM_SERVICE_ENV>
								<JAVA5PSM_MODE>opensplice_shm</JAVA5PSM_MODE>
							</systemPropertyVariables>
							<excludes>
								<exclude>**/*opensplice_spTest.java</exclude>
								<exclude>**/*cafeTest.java</exclude>
								<exclude>${protobuf}</exclude>
							</excludes>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>opensplice-sp</id>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-surefire-plugin</artifactId>
						<version>2.15</version>
						<configuration>
                     <!-- Sets the VM argument line used when unit tests are run. -->
							<argLine>${surefireArgLine}</argLine>
                    <!-- Skips unit tests if the value of skip.unit.tests property is true -->
							<skipTests>${skip.unit.tests}</skipTests>
							<testFailureIgnore>true</testFailureIgnore>
							<redirectTestOutputToFile>true</redirectTestOutputToFile>
							<reuseForks>false</reuseForks>
							<forkedProcessTimeoutInSeconds>500</forkedProcessTimeoutInSeconds>
							<systemPropertyVariables>
								<JAVA5PSM_SERVICE_ENV>org.opensplice.dds.core.OsplServiceEnvironment</JAVA5PSM_SERVICE_ENV>
								<JAVA5PSM_MODE>opensplice_sp</JAVA5PSM_MODE>
							</systemPropertyVariables>
							<excludes>
								<exclude>**/*opensplice_shmTest.java</exclude>
								<exclude>**/*cafeTest.java</exclude>
								<exclude>${protobuf}</exclude>
							</excludes>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>codecoverage</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-antrun-plugin</artifactId>
						<version>1.7</version>
						<dependencies>
							<dependency>
								<groupId>org.jacoco</groupId>
								<artifactId>org.jacoco.ant</artifactId>
								<version>0.7.2.201409121644</version>
							</dependency>
							<dependency>
								<groupId>ant-contrib</groupId>
								<artifactId>ant-contrib</artifactId>
								<version>20020829</version>
							</dependency>
						</dependencies>
						<executions>
							<execution>
								<id>jacoco-report</id>
								<phase>package</phase>
								<goals>
									<goal>run</goal>
								</goals>
								<configuration>
									<target>

										<taskdef name="jacoco-report" classname="org.jacoco.ant.ReportTask"
											classpathref="maven.plugin.classpath" />
										<taskdef classpathref="maven.runtime.classpath"
											resource="net/sf/antcontrib/antcontrib.properties" />
										<available
											file="${project.build.directory}/coverage-reports/jacoco-ut.exec"
											property="jacoco.exec.file.exists" />
										<echo
											message="${project.build.directory}/coverage-reports/jacoco-ut.exec" />
										<if>
											<equals arg1="${jacoco.exec.file.exists}" arg2="true" />
											<then>
												<echo message="Executing jacoco report" />
												<trycatch>
													<try>
														<jacoco-report>
															<executiondata>
																<file
																	file="${project.build.directory}/coverage-reports/jacoco-ut.exec" />
															</executiondata>
															<structure name="java5 OpenSplice">
																<classfiles>
																	<zipfileset src="${JAVA5PSM_LOCATION}">
																		<exclude name="DDS/*.class" />
                                                                        <exclude name="DDS/IoT/*.class" />
																		<exclude name="org/omg/dds/type/typeobject/*.class" />
																		<exclude name="org/omg/dds/type/dynamic/*.class" />
																		<exclude name="org/omg/dds/type/builtin/*.class" />
																		<exclude name="org/opensplice/dds/dcps/*.class" />
																	</zipfileset>
																</classfiles>

																<sourcefiles encoding="UTF-8">
																	<fileset
																		dir="${env.OSPL_HOME_NORMALIZED}/src/api/dcps/java5/common/java/code">
																		<include name="**/*.java" />
																		<exclude name="org/omg/dds/type/typeobject/*.java" />
																		<exclude name="org/omg/dds/type/dynamic/*.java" />
																		<exclude name="org/omg/dds/type/builtin/*.java" />
																		<exclude name="org/opensplice/dds/dcps/*.java" />
                                                                        <exclude name="DDS/IoT/*.java" />
																	</fileset>
																</sourcefiles>
															</structure>

															<html
																destdir="${env.OSPL_OUTER_HOME_NORMALIZED}/Results/jcoverage-java5" />
															<xml
																destfile="${env.OSPL_OUTER_HOME_NORMALIZED}/Results/jcoverage-java5/jacoco.xml" />
														</jacoco-report>
													</try>
													<catch>
														<echo>skipping</echo>
													</catch>
												</trycatch>
											</then>
											<else>
												<echo message="No jacoco-ut.exec file found." />
											</else>
										</if>
									</target>
								</configuration>
							</execution>
						</executions>
					</plugin>
                     <!-- Generate code coverage html pages -->

					<plugin>
						<groupId>org.jacoco</groupId>
						<artifactId>jacoco-maven-plugin</artifactId>
						<version>0.7.2.201409121644</version>
						<executions>
                <!-- Prepares the property pointing to the JaCoCo runtime agent which
                is passed as VM argument when Maven the Surefire plugin is executed. -->
							<execution>
								<id>pre-unit-test</id>
								<goals>
									<goal>prepare-agent</goal>
								</goals>
								<configuration>
                <!-- Sets the path to the file which contains the execution data. -->
									<destFile>${project.build.directory}/coverage-reports/jacoco-ut.exec</destFile>
                <!--
                    Sets the name of the property containing the settings
                    for JaCoCo runtime agent.
                -->
									<propertyName>surefireArgLine</propertyName>
								</configuration>
							</execution>
        <!--
            Ensures that the code coverage report for unit tests is created after
            unit tests have been run.
        -->
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>

	<build>
		<pluginManagement>
			<plugins>
            <!-- Maven exec plugin used for test execution-->
				<plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>exec-maven-plugin</artifactId>
					<version>1.2.1</version>
				</plugin>
			</plugins>
		</pluginManagement>

		<plugins>
        <!--  run idlpp -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>exec-maven-plugin</artifactId>
				<executions>
					<execution>
						<id>generate-sources</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>exec</goal>
						</goals>
						<configuration>
							<executable>${JAVA5PSM_IDLPP_EXEC}</executable>
							<workingDirectory>${gen-test-idl-dir}</workingDirectory>
							<commandlineArgs>${JAVA5PSM_IDLPP_ARGS}</commandlineArgs>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>build-helper-maven-plugin</artifactId>
				<version>1.7</version>
				<executions>
                    <!-- add ${gen-test-idl-dir} as sources for tests -->
					<execution>
						<id>add-generated-sources</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>add-source</goal>
						</goals>
						<configuration>
							<sources>
								<source>${gen-test-idl-dir}</source>
							</sources>
						</configuration>
					</execution>
				</executions>
			</plugin>
        <!--  set minimum java version to 1.6 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.1</version>
				<configuration>
					<source>1.6</source>
					<target>1.6</target>
					<verbose>false</verbose>
					<excludes>
                        <exclude>${protobuf}</exclude>
                    </excludes>
				</configuration>
				<executions>
					<execution>
						<id>default-testCompile</id>
						<phase>test-compile</phase>
						<configuration>
							<testExcludes>
								<exclude>**/*cafeTest.java</exclude>
								<exclude>${protobuf}</exclude>
							</testExcludes>
						</configuration>
						<goals>
							<goal>testCompile</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-enforcer-plugin</artifactId>
				<version>1.3.1</version>
				<configuration>
					<rules>
						<requireEnvironmentVariable>
							<variableName>OSPL_URI</variableName>
							<message>OSPL_URI system variable must be set!</message>
						</requireEnvironmentVariable>
						<requireEnvironmentVariable>
							<variableName>OSPL_HOME_NORMALIZED</variableName>
							<message>OSPL_HOME_NORMALIZED system variable must be set!</message>
						</requireEnvironmentVariable>
						<requireEnvironmentVariable>
							<variableName>SPLICE_TARGET</variableName>
							<message>SPLICE_TARGET system variable must be set!</message>
						</requireEnvironmentVariable>
					</rules>
					<fail>true</fail>
				</configuration>
				<executions>
					<execution>
						<id>enforce-property</id>
						<goals>
							<goal>enforce</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

        <!--    display errors on stdout
        <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-surefire-plugin</artifactId>
            <version>2.9</version>
            <configuration>
                <useFile>false</useFile>
            </configuration>
        </plugin> -->
		</plugins>
	</build>

	<dependencies>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.8.1</version>
		</dependency>
		<dependency>
			<groupId>java5psm-location</groupId>
			<artifactId>java5psm-jar</artifactId>
			<version>1.0.0</version>
			<scope>system</scope>
			<systemPath>${JAVA5PSM_LOCATION}</systemPath>
		</dependency>
	</dependencies>
</project>
